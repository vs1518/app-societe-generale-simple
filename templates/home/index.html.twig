{% extends 'base.html.twig' %}

{% block title %}Société Générale - Questionnaire{% endblock %}

{% block body %}
{# {{ dump() }} #}

{# <h1>Trouver mon asso</h1>

<div id="formulaire">
    <div class="zone-regions">
    </div>
    <div class="zone-mode-de-travail">
    </div>
    <div class="zone-disponibilites">
    </div>
    <div class="zone-missions">
    </div>
</div>

<div id="assos">
</div> #}

<div class="zone-quizz">

    <div class="background">
        <div class="section section-red"></div>
        <div class="section section-black"></div>
    </div>

    <button class="button-entrance" onclick="showSectionIntro()">Questionnaire "Trouve ton association"</button>

    <div class="questionnaire-intro">
        <div class="img-poule-intro"><img src="{{ asset('/images/poule.png')}}" alt="poule dessin" class="chicken-intro" style="margin-left: 60px; margin-top: 200px;"></div>
        <button class="button-close" href="#">x</button>
        <h1>Trouve ton association !</h1>
        <p>Nec minus feminae quoque calamitatum participes fuere similium. nam ex hoc quoque sexu peremptae sunt originis altae conplures, adulteriorum flagitiis obnoxiae vel stuprorum.</p>
        <button class="button-start" onclick="showSectionQuizz()">Commencer</button>

        <div class="eggs-logo">
            <img src="{{ asset('/images/oeuf.png')}}" alt="oeuf dessin" class="egg-intro mt-3">
            <img src="{{ asset('/images/oeuf.png')}}" alt="oeuf dessin" class="egg-intro mb-3">
            <img src="{{ asset('/images/oeuf.png')}}" alt="oeuf dessin" class="egg-intro mt-3">
            <img src="{{ asset('/images/oeuf.png')}}" alt="oeuf dessin" class="egg-intro mb-3">
            <img src="{{ asset('/images/oeuf.png')}}" alt="oeuf dessin" class="egg-intro mt-3">
            <img src="{{ asset('/images/oeuf.png')}}" alt="oeuf dessin" class="egg-intro mb-3">
        </div>
    </div>

    {% include 'home/questionnaire.html.twig' %}


</div>

<script>
const escapeXSS = (text) => {
    if (typeof text !== 'string') return text;
    const map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;',
    };
    return text.replace(/[&<>"']/g, m => map[m]);
};

const questionnaireBody = document.querySelector('.questionnaire-body');
const divpoule = document.querySelector('.div-poule');

const filters = {{ filters|json_encode()|raw }};
const associations = {{ associations|json_encode()|raw }};

console.log('tous les filtres', filters);
console.log('toutes les assos', associations);

const regions = filters.filter(filter => filter.type === 'region');
const modeDeTravail = filters.filter(filter => filter.type === 'mode-de-travail');
const disponibilites = filters.filter(filter => filter.type === 'disponibilite');
const missions = filters.filter(filter => filter.type === 'mission');

let etape = 0;
const filtersSelected = {
    region: null,
    modeDeTravail: null,
    disponibilite: null,
    mission: null,
};

const questions = [
    {
        title: 'J\'habite dans la région :',
        type: 'region',
        filters: regions,
    },
    {
        title: 'Je préfère effectuer ma mission :',
        type: 'modeDeTravail',
        filters: modeDeTravail,
    },
    {
        title: 'Je suis disponible :',
        type: 'disponibilite',
        filters: disponibilites,
    },
    {
        title: 'Ma mission de mentorat, je l\'imagine :',
        type: 'mission',
        filters: missions,
    },
];

const displayQuestion = () => {
    const question = questions[etape];
    const filters = question ? question.filters : [];
    const filtersHTML = filters
        .map(filter => `<button type="button" class="btn btn-outline-dark btn-lg" data-id="${filter.id}">${escapeXSS(filter.text)}</button>`)
        .join('');

    const assos = getFilteredAssociations();
    const nbAssos = assos.length;

    questionnaireBody.innerHTML = `
    <h3 class="text-center mb-4">
        ${escapeXSS(question ? question.title : '')}
    </h3><div class="d-grid gap-2 mb-4">
        ${nbAssos > 0 ? filtersHTML : `<p class="text-center text-danger">Aucune association ne correspond à vos critères.</p>`}
        ${etape > 0 ? '<button type="button" class="btn btn-outline-danger btn-lg">Retour</button>' : ''}
    </div>

    <ul>
        ${assos.map(asso => '<li>' + escapeXSS(asso.name) + '</li>').join('')}
    </ul>
    `;

    divpoule.innerHTML = `${ etape >= 0 ?  `<div class="img-poule-intro1"><img src="{{ asset('/images/poule.png')}}" alt="poule dessin" class="chicken-intro" style="margin-left: 150px; margin-top: 200px;"></div>
    ` : ''}

    ${ etape == 0 ?  `<div class="img-poule-intro"><img src="{{ asset('/images/oeuf.png')}}" alt="poule dessin" class=""></div>` : ''}

    ${ etape == 1 ?  `<div class="img-poule-intro"><img src="{{ asset('/images/20-oeuf.png')}}" alt="poule dessin" class=""></div>` : ''}

    ${ etape == 2 ?  `<div class="img-poule-intro"><img src="{{ asset('/images/40-oeuf.png')}}" alt="poule dessin" class=""></div>` : ''}

    ${ etape == 3 ?  `<div class="img-poule-intro"><img src="{{ asset('/images/60-oeuf.png')}}" alt="poule dessin" class=""></div>` : ''}`;

    console.log('etape', etape);
    console.log('filtersSelected', filtersSelected);
    console.log('nbAssos', nbAssos);
    console.log('assos', assos);

    const btns = questionnaireBody.querySelectorAll('button');
    btns.forEach((btn, index) => {
        btn.addEventListener('click', () => {
            if (btn.textContent === 'Retour') {
                filtersSelected[questions[etape - 1].type] = null;
                etape--;
            } else {
                const id = parseInt(btn.getAttribute('data-id'));
                filtersSelected[question.type] = id;
                etape++;
            }

            if (etape > 3) {
                displayResult();
            } else {
                displayQuestion();
            }
        });
    });
};

const getFilteredAssociations = () => {
    return associations.filter(asso => {
        if (
            filtersSelected.region !== null
            && !asso.filters.includes(filtersSelected.region)
        ) {
            return false;
        }
        if (
            filtersSelected.modeDeTravail !== null
            && !asso.filters.includes(filtersSelected.modeDeTravail)
        ) {
            return false;
        }
        if (
            filtersSelected.disponibilite !== null
            && !asso.filters.includes(filtersSelected.disponibilite)
        ) {
            return false;
        }
        if (
            filtersSelected.mission !== null
            && !asso.filters.includes(filtersSelected.mission)
        ) {
            return false;
        }
        return true;
    });
};

const displayResult = () => {
    const assos = getFilteredAssociations();

    questionnaireBody.innerHTML = `
    <h3 class="text-center mb-4">
        Résultat
    </h3>
    <div class="img-poule-intro"><img src="{{ asset('/images/poule.png')}}" alt="poule dessin" class="" ></div>
<div class="img-poule-intro"><img src="{{ asset('/images/poussin.png')}}" alt="poule dessin" class=""></div>
    <div class="d-grid gap-2">
        ${assos.map(asso => `
            <div class="card">
                <div class="card-body">
                    ${escapeXSS(asso.name)}
                </div>
            </div>
        `).join('')}
        ${assos.length === 0 ? '<p class="text-center text-danger">Aucune association ne correspond à vos critères.</p>' : ''}
        <button type="button" class="btn btn-outline-danger btn-lg">Retour</button>
    </div>
    `;

    questionnaireBody.querySelector('button').addEventListener('click', () => {
        etape--;
        filtersSelected[questions[etape].type] = null;
        displayQuestion();
    });
};

displayQuestion();

{# const zoneAssos = document.querySelector('#assos');

const zoneRegions = document.querySelector('.zone-regions');
const zoneModeDeTravail = document.querySelector('.zone-mode-de-travail');
const zoneDisponibilites = document.querySelector('.zone-disponibilites');
const zoneMissions = document.querySelector('.zone-missions');

const regions = filters.filter(filter => filter.type === 'region');
const modeDeTravail = filters.filter(filter => filter.type === 'mode-de-travail');
const disponibilites = filters.filter(filter => filter.type === 'disponibilite');
const missions = filters.filter(filter => filter.type === 'mission');

const filtersSelected = {
    regions: [],
    modeDeTravail: [],
    disponibilites: [],
    missions: [],
};

const escapeXSS = (text) => {
    if (typeof text !== 'string') return text;
    const map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;',
    };
    return text.replace(/[&<>"']/g, m => map[m]);
};

/*
zoneRegions.innerHTML = `
<label for="region">Région</label>
<select name="region" id="region" multiple>
    ${regions.map(region => `<option value="${region.id}">${region.text}</option>`).join('')}
</select>
`;

zoneModeDeTravail.innerHTML = `
<label for="mode-de-travail">Mode de travail</label>
<select name="mode-de-travail" id="mode-de-travail" multiple>
    ${modeDeTravail.map(mode => `<option value="${mode.id}">${mode.text}</option>`).join('')}
</select>
`;

zoneDisponibilites.innerHTML = `
<label for="disponibilite">Disponibilité</label>
<select name="disponibilite" id="disponibilite" multiple>
    ${disponibilites.map(disponibilite => `<option value="${disponibilite.id}">${disponibilite.text}</option>`).join('')}
</select>
`;

zoneMissions.innerHTML = `
<label for="mission">Mission</label>
<select name="mission" id="mission" multiple>
    ${missions.map(mission => `<option value="${mission.id}">${mission.text}</option>`).join('')}
</select>
`;
*/

const createSelect = (zone, label, type) => {
    zone.innerHTML = `
    <label for="${type}">${label}</label>
    <select name="${type}" id="${type}" multiple>
        ${filters.filter(filter => filter.type === type).map(filter => `<option value="${escapeXSS(filter.id)}">${escapeXSS(filter.text)}</option>`).join('')}
    </select>
    `;
};

createSelect(zoneRegions, 'Région', 'region');
createSelect(zoneModeDeTravail, 'Mode de travail', 'mode-de-travail');
createSelect(zoneDisponibilites, 'Disponibilité', 'disponibilite');
createSelect(zoneMissions, 'Mission', 'mission');

const displayAssos = () => {
    const assos = associations.filter(asso => {
        if (
            filtersSelected.regions.length > 0
            && !asso.filters.some(filterId => filtersSelected.regions.includes(filterId))
        ) {
            return false;
        }
        if (
            filtersSelected.modeDeTravail.length > 0
            && !asso.filters.some(filterId => filtersSelected.modeDeTravail.includes(filterId))
        ) {
            return false;
        }
        if (
            filtersSelected.disponibilites.length > 0
            && !asso.filters.some(filterId => filtersSelected.disponibilites.includes(filterId))
        ) {
            return false;
        }
        if (
            filtersSelected.missions.length > 0
            && !asso.filters.some(filterId => filtersSelected.missions.includes(filterId))
        ) {
            return false;
        }
        return true;
    });

    zoneAssos.innerHTML = `
    <ul>
        ${assos.map(asso => `<li>${escapeXSS(asso.name)}</li>`).join('')}
    </ul>
    `;
};

const getSelectValues = (selectElement) => {
    if (!selectElement) return [];
    return Array.from(selectElement.selectedOptions)
        .filter(option => option.selected)
        .map(option => parseInt(option.value));
};

/*

zoneRegions.querySelector('select').addEventListener('change', (event) => {
    const selectedValues = getSelectValues(event.target);
    filtersSelected.regions = selectedValues;
    displayAssos();
});

zoneModeDeTravail.querySelector('select').addEventListener('change', (event) => {
    const selectedValues = getSelectValues(event.target);
    filtersSelected.modeDeTravail = selectedValues;
    displayAssos();
});

zoneDisponibilites.querySelector('select').addEventListener('change', (event) => {
    const selectedValues = getSelectValues(event.target);
    filtersSelected.disponibilites = selectedValues;
    displayAssos();
});

zoneMissions.querySelector('select').addEventListener('change', (event) => {
    const selectedValues = getSelectValues(event.target);
    filtersSelected.missions = selectedValues;
    displayAssos();
});

*/

const createSelectListener = (zone, type) => {
    zone.querySelector('select').addEventListener('change', (event) => {
        const selectedValues = getSelectValues(event.target);
        filtersSelected[type] = selectedValues;
        displayAssos();
    });
};

createSelectListener(zoneRegions, 'regions');
createSelectListener(zoneModeDeTravail, 'modeDeTravail');
createSelectListener(zoneDisponibilites, 'disponibilites');
createSelectListener(zoneMissions, 'missions');

displayAssos(); #}



/* ______Code pour animation à l'entrée_____ */
document.addEventListener('DOMContentLoaded', function() {
    var sections = document.querySelectorAll('.section');

    function animateSections() {
        for (var i = 0; i < sections.length; i++) {
            var section = sections[i];
            var sectionTop = section.getBoundingClientRect().top;
    
            if (sectionTop - window.innerHeight + 100 < 0) {
            section.classList.add('section-visible');
            } else {
            section.classList.remove('section-visible');
            }
        }
    }

    animateSections(); // Appel initial de la fonction animateSections
});

/* ______Code pour faire apparaitre l'introduction du questionnaire______*/
function showSectionIntro() {
    var buttonEntrance = document.querySelector('.button-entrance');
    var questionnaireIntro = document.querySelector('.questionnaire-intro');
    var divpoule = document.querySelector('.div-poule');

    // ButtonEntrance devient display:none
    buttonEntrance.style.display = 'none';
    divpoule.style.display = 'none';

    // Questionnaire devient display:flex
    questionnaireIntro.style.display = 'flex';
    
}

/* ______Code pour lancer le questionnaire (introduction, bouton "commencer")______*/
function showSectionQuizz() {
    var questionnaireIntro = document.querySelector('.questionnaire-intro');
    var questionnaireBody = document.querySelector('.questionnaire-body');
    var divpoule = document.querySelector('.div-poule');

    // ButtonEntrance devient display:none
    questionnaireIntro.style.display = 'none';

    // Questionnaire devient display:flex
    questionnaireBody.style.display = 'flex';
    divpoule.style.display = 'flex';

}




</script>

{% endblock %}
